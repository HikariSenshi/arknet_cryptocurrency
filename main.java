import java.lang.*;
import java.sql.*;
import java.io.*;
import java.util.Scanner;
import java.util.*;

class Main {

	final private static Mysql m = Mysql.get();

	public final static int MESSAGE_SIZE = 900;

	static class Mysql {

		private Mysql() {

		}

		//
		static Mysql get() {
			return new Mysql();
		}

		ResultSet getAll(String table) throws SQLException {
			Statement s = this.connect();
			String query = "SELECT * " + "FROM " + table;
			return s.executeQuery(query);
		}

		ResultSet getField(String table, String field, String search, char cond_symbol, String searchvalue)
				throws SQLException {
			Statement s = this.connect();
			String query = "SELECT " + field + " FROM " + table + " WHERE " + search + "" + cond_symbol + ""
					+ searchvalue;
			// print(query);
			return s.executeQuery(query);
		}

		int setField(String table, String values, String check_field, char cond_symbol, String cond)
				throws SQLException {
			Statement s = this.connect();

			String query = "UPDATE " + table + " SET " + values + " WHERE " + check_field + "" + cond_symbol + ""
					+ cond;
			// print(query);
			return s.executeUpdate(query);
		}

		int deleteField(String table, String check_field, char cond_symbol, String cond) throws SQLException {
			Statement s = this.connect();
			String query = "DELETE FROM " + table + " WHERE " + check_field + "" + cond_symbol + "" + cond;
			// print(query);
			return s.executeUpdate(query);

		}

		int addField(String table, String... values) throws SQLException {
			Statement s = this.connect();
			ResultSet rs = getAll(table);
			ResultSetMetaData data = rs.getMetaData();

			int count = data.getColumnCount();

			String set = "(";
			for (int i = 2; i <= count - 1; i++) {
				set += data.getColumnName(i) + ", ";
			}
			set += data.getColumnName(count) + ")";
			String val = "(";

			for (int i = 0; i < values.length - 1; i++)
				val += values[i] + ", ";
			val += values[values.length - 1] + ")";

			String query = "INSERT INTO " + table + "" + set + " VALUES" + val;
			// Main.print(query);
			return s.executeUpdate(query);
			//
		}

		private Statement connect() throws SQLException {
			Statement stmt = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/arknet", "hikari", "viadark")
					.createStatement();
			return stmt;
		}
	}

	public static void main(String[] args) {
		String platform = args[0];
		String fromid = args[1];
		String warp = args[2];
		String time = args[3];
		String message = args[4];
		long pr = 0;
		try {
			// pr = Long.parseLong(Crutch.fileRead("time.dat"));
			// long time_time = (Long.parseLong(time) - pr);
			long mytime = Long.parseLong(time);
			// double hours = (double)mytime/(60*60);
			// if( (Long.parseLong(time) - pr) );
			Updater.update((double) mytime / 3600, Long.parseLong(time), m);// –æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

			check(message, fromid, time);

		} catch (SQLException se) {
			System.out.println("sqlerror");
			se.printStackTrace();
		} catch (Exception e) {
			System.out.println("[IO] –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
			// e.printStackTrace();
		}
	}

	static void check(String arg, String fromid, String time) throws Exception {
		String[] sa = arg.split(" ");
		/*
		 * Main.print("parameters..."); for (String s : sa ) { Main.print(s); }
		 * 
		 * if(!(fromid.equals("326074388") || fromid.equals("461663203"))) {
		 * Main.print("[IO] –Ω–µ—Ç –ø—Ä–∞–≤"); return; }
		 */
		if (sa.length == 1) {
			switch (sa[0]) {
			// case "/filetest":
			// Crutch.fileOut("1.dat","123");
			// break;
			case "/crypto":
				print("üö™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã , –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n ‚ú® –°–æ–∑–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É /crypto create;"
						+ "\n üõí –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Å –±–∏—Ä–∂–∏ /crypto buy"
						+ "\n üí∞ –ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ –±–∏—Ä–∂—É /crypto sell"
						+ "\n üí≥ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—Ä–∏–ø—Ç—É –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É /crypto transact"
						+ "\n üëú –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ /crypto balance"
						+ "\n üìë –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç /crypto list"
						+ "\n üìú –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ /crypto info" + "\n –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏ /pc"
						+ "\n üë∑ –ú–∞–π–Ω–∏–Ω–≥ /mining" + "\n –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç /crypto help");
				break;
			case "/checker":
				print("check");
				break;
			case "/pc":
				print("üíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö" + "\n üìë –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö pc /pc list"
						+ "\n üìú –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü—Ü–∏—è –æ pc /pc info <id>" 
						+ "\n ‚ú® –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä /pc create" + "\n üîß –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä /pc destroy <id>"
						+ "\n üìé –ú–∞–≥–∞–∑–∏–Ω –¥–µ—Ç–∞–ª–µ–π /pc shop" + "\n üí∞ –ü—Ä–æ–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ /pc selldetail "
						+ "\n üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ü–ö /pc slots"
						+ "\n üíª –ü–æ–¥—Ä–æ–±–Ω–µ–µ o pc /pc help");
				break;
			case "/mining":
				print("‚Çø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–æ–º:"
						+ "\n ‚öï –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ –ø–æ—Ç–æ–∫ –º–∞–π–Ω–∏–Ω–≥–∞ /mining set"
						+ "\n üíº –°–æ–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –º–∞–π–Ω–∏–Ω–≥–∞ /mining profit " + "\n ‚ùÑ –í—ã–∫–ª—é—á–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥ –Ω–∞ –ü–ö /mining leave"
						+ "\n üìú –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–∞–π–Ω–∏–Ω–≥–µ /mining help");
				break;
			}
		} else {
			switch (sa[0]) {
			case "/crypto":
				switch (sa[1]) {
				case "help":
					Cryptocurrency.CryptoInfo();
					break;
				case "list":
					Cryptocurrency.list(m, true);
					break;
				case "create":
					if (sa.length == 5) {
						try {
							Cryptocurrency.create(Double.parseDouble(sa[3]) / 100, Long.parseLong(sa[4]), sa[2], fromid,
									m);
						} catch (Exception e) {
							Main.print("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã(–∏–º—è, –∫–æ–º–∏—Å—Å–∏—è, —Ñ–æ–Ω–¥)");
							e.printStackTrace();
						}
					} else {
						Main.print("‚ö† –£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã /crypto create <name>(–Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç)"
								+ "\n <–∫–æ–º–∏—Å—Å–∏—è>(—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99, –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏ ) <—Ñ–æ–Ω–¥>(–Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã)");
					}
					break;
				case "sell":
					if (sa.length == 4) {
						try {
							Burse.sell(m, sa[2], Double.parseDouble(sa[3]), fromid);
						} catch (NullPointerException npe) {
						}
					} else {
						Main.print("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–º—è , —Å—É–º–º–∞)");
					}
					break;
				case "buy":
					if (sa.length == 4) {
						try {
							Burse.buy(m, sa[2], Double.parseDouble(sa[3]), fromid);

						} catch (NullPointerException npe) {
						}
					} else {
						Main.print("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–º—è , —Å—É–º–º–∞)");
					}
					break;
				case "info":
					if (sa.length == 3) {
						print(Cryptocurrency.getCryptoByName(sa[2], m));
					} else {
						Main.print("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–º—è)");
					}
					break;
				case "balance":
					try {
						if (sa.length == 3) {
							print("–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: "
									+ OutputManager.getFractionPrefix(Wallet
											.getWallet(Cryptocurrency.getCryptoByName(sa[2], m), fromid, m).getMoney())
									+ " " + sa[2] + "`s");
						} else {
							Main.print("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–º—è)");
						}
					} catch (Exception e) {
						print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–Ω—á–∏—Ç—å");
						// e.printStackTrace();
					}
					break;
				case "transact":
					if (sa.length == 5) {
						Burse.transact(m, sa[2], Double.parseDouble(sa[3]) / 100, fromid, sa[4]);
					} else {
						Main.print("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–º—è , —Å—É–º–º–∞, id –∏–≥—Ä–æ–∫–∞)");
					}
					break;

				}
				break;
			case "/pc":
				switch (sa[1]) {
				case "list":
					ArrayList<PCManager.PC> pclist = PCManager.getAllUserPC(fromid, m);
					if (pclist.isEmpty()) {
						Main.print("üîé –ö–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –Ω–µ—Ç...");
					} else {
						for (PCManager.PC pc : pclist) {
							Main.print(pc.getShortPCInfo(m));
						}
					}
					break;
				case "info":
					if (sa.length == 3) {
						PCManager.PC pc = PCManager.PC.getPC(m, Integer.parseInt(sa[2]));
						if (pc != null) {
							PCManager.printPCInformation(Long.parseLong(sa[2]), fromid, m);
						}
					} else {
						Main.print("‚ö† –û—à–∏–±–∫–∞ , —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (id)");
					}

					break;
				case "help":
					PCManager.PCInfo();
					break;
				case "create":
					try {
						print(PCManager.PC.createPC(m, fromid).getShortPCInfo(m));
					} catch (NullPointerException npe) {
					}
					break;
				case "destroy":
					if (sa.length == 3) {
						PCManager.PC.getPC(m, Integer.parseInt(sa[2])).destroy(m, fromid);
					} else {
						print("‚ö† –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (id)");
					}
					break;
				case "shop":
					if (sa.length == 2) {
						Main.print("======================\n –ú–ê–ì–ê–ó–ò–ù –î–ï–¢–ê–õ–ï–ô \n=======================\n"
								+ "1) –ö–æ—Ä–ø—É—Å—ã\n" + "2) –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã\n" + "3) –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã\n"
								+ "4) –ë–ª–æ–∫–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏\n" + "5) –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã\n" + "6) –í–∏–Ω—á–µ—Å—Ç–µ—Ä—ã\n"
								+ "7) –ë–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–∏–∫–∏\n" + "8) –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞\n" + "9) –ö—É–ª–µ—Ä—ã\n"
								+ "10) –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ–¥—É–ª–∏\n" + "–í–≤–µ–¥–∏—Ç–µ /pc shop <–Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞> <—Å—Ç—Ä–∞–Ω–∏—Ü–∞>");
					} else if (sa.length >= 3) {
						String s, instruction;
						OutputManager bg = null;
						s = instruction = "";
						int page = 0;
						switch (Integer.parseInt(sa[2])) {
						case 1:

							s = "=======================\n–†–∞–∑–¥–µ–ª –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤\n=======================\n"
									+ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∫–æ—Ä–ø—É—Å–æ–≤.–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∫–æ—Ä–ø—É—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n"
									+ "—Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ , –∞ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–º–µ–Ω—å—à–∞—é—Ç —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏ —É–≤–µ–ª–∏—á–∞—Ç\n"
									+ "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.\n" + "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";

							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("[IO] –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						case 2:
							s = "=======================\n–†–∞–∑–¥–µ–ª –í–∏–¥–µ–æ–∫–∞—Ä—Ç\n=======================\n"
									+ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –≤–∏–¥–µ–æ–∫–∞—Ä—Ç.–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã, –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
									+ "–∫–æ–º–ø—å—é—Ç–µ—Ä–∞ , –æ–Ω–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ—Å–Ω–æ–≤–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞, —á–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ\n"
									+ "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, —Ç–µ–º –±–æ–ª—å—à–µ –º–æ—â–Ω–æ—Å—Ç—å, –º–µ–Ω—å—à–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–ª–æ–º–∫–∏\n"
									+ "–Ω–æ –±—ã–≤–∞—é—Ç –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ;-)\n" + "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";

							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("üîé —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						case 3:
							s = "=======================\n–†–∞–∑–¥–µ–ª –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏—Ö –ø–ª–∞—Ç\n=======================\n"
									+ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏—Ö –ø–ª–∞—Ç.\n"
									+ "–ù–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞–π–Ω–∏–Ω–≥–∞ –æ–Ω–∏ –Ω–µ –æ—Å–æ–±–æ –≤–ª–∏—è—é—Ç, –Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –ü–ö\n"
									+ "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";
							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("üîé —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						case 4:
							s = "=======================\n–†–∞–∑–¥–µ–ª –û–ó–£\n=======================\n"
									+ "–û–ó–£ - –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å, –¥–µ—Ç–∞–ª—å, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –±—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n"
									+ "–í–ª–∏—è–µ—Ç –Ω–∞ –º–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞\n" + "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";
							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("üîé –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						case 5:
							s = "=======================\n–†–∞–∑–¥–µ–ª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤\n=======================\n"
									+ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤.–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä ‚Äî —Å–µ—Ä–¥—Ü–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞! \n"
									+ "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";
							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("üîé —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						case 6:
							s = "=======================\n–†–∞–∑–¥–µ–ª –ë–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–∏–∫–æ–≤\n=======================\n"
									+ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–∏–∫–æ–≤.–ë–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–∏–∫ ‚Äî —ç—Ç–æ –≤–Ω–µ—à–Ω—è—è –¥–µ—Ç–∞–ª—å. \n"
									+ "–û–Ω —Ö—Ä–∞–Ω–∏—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä –æ—Ç –ø–µ—Ä–µ–ø–∞–¥–æ–≤ —Ç–æ–∫–∞ , —É–≤–µ–ª–∏—á–∏–≤–∞—è —Å—Ä–æ–∫ –µ–≥–æ —Å–ª—É–∂–±—ã –∏ —É–º–µ–Ω—å—à–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–æ–º–∫–∏.\n"

									+ "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";
							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("üîé —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						case 7:
							s = "=======================\n–†–∞–∑–¥–µ–ª –ë–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–∏–∫–æ–≤\n=======================\n"
									+ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–∏–∫–æ–≤.–ë–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–∏–∫ ‚Äî —ç—Ç–æ –≤–Ω–µ—à–Ω—è—è –¥–µ—Ç–∞–ª—å. \n"
									+ "–û–Ω —Ö—Ä–∞–Ω–∏—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä –æ—Ç –ø–µ—Ä–µ–ø–∞–¥–æ–≤ —Ç–æ–∫–∞ , —É–≤–µ–ª–∏—á–∏–≤–∞—è —Å—Ä–æ–∫ –µ–≥–æ —Å–ª—É–∂–±—ã –∏ —É–º–µ–Ω—å—à–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–æ–º–∫–∏.\n"

									+ "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";
							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("üîé —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						case 8:
							s = "=======================\n–†–∞–∑–¥–µ–ª –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞\n=======================\n"
									+ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞.–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. \n"
									+ "—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.\n"

									+ "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";
							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("üîé —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						case 9:
							s = "=======================\n–†–∞–∑–¥–µ–ª –∫—É–ª–µ—Ä–æ–≤\n=======================\n"
									+ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∫—É–ª–µ—Ä–æ–≤.–ö—É–ª–µ—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–Ω–∞ –ü–ö. \n"
									+ "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞–π–Ω–∏–Ω–≥–∞ –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–æ–º–∫–∏.\n"

									+ "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";
							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("üîé –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						case 10:
							s = "=======================\n–†–∞–∑–¥–µ–ª –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ–¥—É–ª–µ–π\n=======================\n"
									+ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ–¥—É–ª–µ–π.–ù—É–∂–Ω—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–µ—Ç—å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
									+ "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤—è–∑–∏ —Å –º–∞–π–Ω–∏–Ω–≥–æ–≤—ã–º–∏ –ø—É–ª–∞–º–∏, —á—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞.\n"

									+ "                –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–¥–∞–∂–µ:\n";
							bg = PCManager.getDetailListForType(Integer.parseInt(sa[2]),
									MESSAGE_SIZE - s.length() - 100, MESSAGE_SIZE - 100, m);
							page = 1;
							if ((sa.length == 4)) {
								page = Integer.parseInt(sa[3]);
								if (page > bg.getPartNumber()) {
									Main.print("üîé —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
									return;
								}
							} else {
								print(s);
							}
							instruction = "\n –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /pc buydetail <id –¥–µ—Ç–∞–ª–∏> <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>\n"
									+ "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + " –∏–∑ " + bg.getPartNumber();
							Main.print(bg.getPart(page - 1));
							Main.print(instruction);
							break;
						default:
							Main.print("‚õî –¢–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Ç!");
							return;
						}
					}
					break;
				case "buydetail":
					try {
						print("üõí –ü–æ–∫—É–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π");
						if (sa.length == 3) {
							print("‚ö† –£–∫–∞–∂–∏—Ç–µ id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞");
						}
						if (sa.length == 2) {
							print("‚ö† –£–∫–∞–∂–∏—Ç–µ id –¥–µ—Ç–∞–ª–∏ , id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞");
						}
						if (sa.length == 4) {
							if (PCManager.buyDetail(Integer.parseInt(fromid), Integer.parseInt(sa[2]),
									PCManager.getDetailTypeId(Integer.parseInt(sa[2]), m),
									PCManager.PC.getPC(m, Integer.parseInt(sa[3])), m)) {
								print("‚ö† –î–µ—Ç–∞–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
							} else {
								print("‚õî –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å");
							}
						}
					} catch (NullPointerException n) {
					}
					break;
				case "selldetail":
					print("üîß –ü—Ä–æ–¥–∞–∂–∞ –¥–µ—Ç–∞–ª–µ–π");
					if (sa.length == 3) {
						print("‚ö† –£–∫–∞–∂–∏—Ç–µ id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞");
					}
					if (sa.length == 2) {
						print("‚ö† –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –¥–µ—Ç–∞–ª–∏ , id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞");
					}
					if (sa.length == 4) {
						if (PCManager.sellDetail(Integer.parseInt(fromid),
								PCManager.getDetailTypeId(Integer.parseInt(sa[2]), m),
								PCManager.PC.getPC(m, Integer.parseInt(sa[3])), m)) {
							print("‚ö† –î–µ—Ç–∞–ª—å –ø—Ä–æ–¥–∞–Ω–∞");
						} else {
							print("‚õî –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å");
						}
					}
					break;
				case "slots":
					ResultSet r = m.getField("users", "home", "uid", '=', fromid);
					String home = "";
					if (r.next())
						home = r.getString(1);
					print("[IO] –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:" + PCManager.getUserSlots(m, Long.parseLong(fromid)) + " –≤—Å–µ–≥–æ:"
							+ PCManager.getHomeSlots(home));
					break;
				}
				break;
			case "/mining":
				switch (sa[1]) {
				case "set":
					if (sa.length == 2) {
						Main.print("‚ö† –î–ª—è –∑–∞–ø—É—Å–∫–∞ /mining set <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞> <–∏–º—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã>");
					}
					if (sa.length == 3) {
						Main.print("‚ö† –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã");
					}
					if (sa.length == 4) {
						MiningManager.setMiningPool(fromid, Integer.parseInt(sa[2]), sa[3], Long.parseLong(time), m);
					}
					break;
				case "profit":
					if (sa.length == 2) {
						Main.print("‚ö† –î–ª—è —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥ –≤–≤–µ–¥–∏—Ç–µ <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>");
					} else {
						MiningManager.getProfit(fromid, Integer.parseInt(sa[2]), Long.parseLong(time), m);
					}
					break;
				case "leave":
					if (sa.length == 2) {
						Main.print("‚ö† –î–ª—è –≤—ã—Ö–æ–¥–∞ —Å –ø–æ—Ç–æ–∫–∞  –≤–≤–µ–¥–∏—Ç–µ <id –∫–æ–º–ø—å—é—Ç–µ—Ä–∞>");
					} else {
						MiningManager.leaveMiningPool(fromid, Integer.parseInt(sa[2]), Long.parseLong(time), m);
					}

					break;
				case "help":
					MiningManager.MiningInfo();
					break;
				}
				break;
			}

		}
	}

	static void print(boolean b) {
		System.out.println(b);
	}

	static void print(int i) {
		System.out.println(i);
	}

	static void print(ResultSet rs) {
		try {
			while (rs.next()) {
				Main.print("enter");
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++)
					System.out.println(rs.getString(i));
			}

		} catch (SQLException se) {
			se.printStackTrace();
			System.out.println("SQLERROR");
		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println("ERROR");
			// 1
		}
	}

	static void print(String... a) {
		for (String s : a) {
			System.out.println(s);
		}
	}

	static void print(Object... o) {
		for (Object x : o) {
			System.out.println(x);
		}

	}

}

class Crutch {

	public static double getMantissa(double r) {
		if (r == 0) {
			return 0;
		}
		if (Math.abs(r) < 1) {
			while (Math.abs(r) < 1) {
				r *= 10;
			}
		} else {
			while (Math.abs(r) > 10) {
				r /= 10;
			}
		}
		return r;
	}

	static boolean fileOut(String name, String data) throws Exception {
		FileWriter f = new FileWriter(name, false);
		f.write(data);
		f.close();
		return true;
	}

	static String fileRead(String name) throws Exception {
		FileReader fr = new FileReader(name);
		Scanner sc = new Scanner(fr);
		String ret = "";
		while (sc.hasNextLine()) {
			ret += sc.nextLine();
			fr.close();
		}
		return ret;
	}

}

class Updater {

	public static void update(double timeinh, long time, Main.Mysql m) throws SQLException {
		double update = timeinh - getLastUpdateTime(m);
		if (update > 0.5) {
			Burse.updateAll(m, update);
			setLastUpdateTime(time, m);
			Main.print("‚ö† –¶–µ–Ω—ã –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
		}
	}

	/*
	 * if(update > 8){ // }
	 */
	private static double getLastUpdateTime(Main.Mysql m) throws SQLException {
		ResultSet r = m.getField("meta", "value", "name", '=', "'lasttime'");
		double result = 0;
		if (r.next()) {
			result = (double) r.getLong(1) / 3600;
			return result;
		}

		return 0.0;
	}

	private static boolean setLastUpdateTime(long time, Main.Mysql m) throws SQLException {
		m.setField("meta", "value=" + time, "name", '=', "'lasttime'");
		return true;
	}
}

class OutputManager {
	private ArrayList<String> parts;
	
	public OutputManager(){
		this.parts = new ArrayList<String>(10);
	}
	
	public void addPart(String s){
		parts.add(s);
	}
	
	public int getPartNumber(){
		return parts.size();
	}
	
	public String getPart (int index) {
		return parts.get(index);
	}
	
	public static String getFractionPrefix(double r) {
		if(r>1){
			return r+"";
		}else if(r>0.001){
			return (r*1000) + " —Ç—ã—Å—è—á–Ω—ã—Ö ";
		}else if(r>0.000001){
			return(r*1000000)+ " –º–∏–ª–ª–∏–æ–Ω–Ω—ã—Ö ";
		}else if(r>0.000000001){
			return(r*1000000000) + " –º–∏–ª–ª–∏–∞—Ä–¥–Ω—ã—Ö ";
		}else if(r==0){
			return r+"";
		}
		else return "—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ ";
	}
	


}